 ------
 Logging decors
 ------
 Yegor Bugayenko
 ------
 2012-04-29
 ------

~~
~~ Copyright (c) 2012, jcabi.com
~~ All rights reserved.
~~
~~ Redistribution and use in source and binary forms, with or without
~~ modification, are permitted provided that the following conditions
~~ are met: 1) Redistributions of source code must retain the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer. 2) Redistributions in binary form must reproduce the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer in the documentation and/or other materials provided
~~ with the distribution. 3) Neither the name of the jcabi.com nor
~~ the names of its contributors may be used to endorse or promote
~~ products derived from this software without specific prior written
~~ permission.
~~
~~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
~~ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
~~ NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
~~ FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
~~ THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
~~ INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
~~ (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
~~ SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
~~ HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
~~ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
~~ ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
~~ OF THE POSSIBILITY OF SUCH DAMAGE.
~~
~~ @version $Id: decors.apt.vm 324 2012-02-26 22:31:04Z guard $
~~

Decors

  Log an event like this:

+--
  import com.jcabi.log.Logger;
  class Foo {
    void bar(int value) {
      final long start = System.nanoTime();
      // some operations
      Logger.debug(
        this,
        "bar(%d): done in %[nano]d",
        value,
        System.nanoTime() - start
      );
    }
  }
+--

  You will see something like this in log:

---
[DEBUG] Foo: #bar(1234): done in 3.45ms
---

  Nano-seconds will be formatted as time through a built-in "decor":
  {{{./apidocs/com/jcabi/log/decors/NanoDecor.html}<<<NanoDecor>>>}}.

  Pre-defined decors:

   * {{{./apidocs/com/jcabi/log/decors/NanoDecor.html}<<<DomDecor>>>}}

   * {{{./apidocs/com/jcabi/log/decors/NanoDecor.html}<<<ExceptionDecor>>>}}

   * {{{./apidocs/com/jcabi/log/decors/NanoDecor.html}<<<ListDecor>>>}}

   * {{{./apidocs/com/jcabi/log/decors/NanoDecor.html}<<<NanoDecor>>>}}

   * {{{./apidocs/com/jcabi/log/decors/NanoDecor.html}<<<ObjectDecor>>>}}

   * {{{./apidocs/com/jcabi/log/decors/NanoDecor.html}<<<SecretDecor>>>}}

   * {{{./apidocs/com/jcabi/log/decors/NanoDecor.html}<<<SizeDecor>>>}}

   * {{{./apidocs/com/jcabi/log/decors/NanoDecor.html}<<<TypeDecor>>>}}

  In order to use your own decor just implement <<<java.util.Formattable>>>:

+--
import com.jcabi.log.Decor;
import java.util.Formattable;
import java.util.Formatter;
public final class DataDecor implements Formattable {
    private final transient Data data;
    public DataDecor(final Data dat) {
        this.data = dat;
    }
    @Override
    public void formatTo(final Formatter formatter, final int flags,
        final int width, final int precision) {
        formatter.format("%s", this.data.getSomeValueOutOfIt());
    }
}
+--

  Then, provide its class name in log formatting string, for example:

+--
  import com.jcabi.log.Logger;
  Logger.debug(
    this,
    "bar(%d): show some data: %[com.example.DataDecor]s",
    value,
    data
  );
+--

